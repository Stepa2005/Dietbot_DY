from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from html import escape
from aiogram.enums import ParseMode
import asyncio
from asyncio import run
import logging
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from bot import bot
from config import GigaChatKey
import app.keyboards as kb
import database.requests as rq
import database.models as models


# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
class Register(StatesGroup):
    name = State()
    tg_id = State()
    sex = State()
    age = State()
    height = State()
    weight = State()
    ph_condition = State()
    ch_illnesses = State()
    goal = State()


class Write(StatesGroup):
    can = State()


reminder_tasks = {}
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
router = Router()


def is_alpha(input_text: str) -> bool:
    cleaned_input = "".join([char for char in input_text if char.isalpha()])
    return len(cleaned_input) == len(input_text)


def is_digit(input_text: str) -> bool:
    cleaned_input = "".join([char for char in input_text if char.isdigit()])
    return len(cleaned_input) == len(input_text)


@router.message(CommandStart(), State(None))
async def cmd_start(message: Message, state: FSMContext):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç", reply_markup=kb.register)
    await message.answer(f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")


@router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    if not is_alpha(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –¥–ª—è –∏–º–µ–Ω–∏.")
        return
    await state.update_data(name=message.text)
    print("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏:", await state.get_data())
    await state.set_state(Register.tg_id)
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@router.message(Register.tg_id)
async def register_tg_id(message: Message, state: FSMContext):
    await state.update_data(tg_id=message.from_user.id)
    await message.answer(
        "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–π—Ç–µ –∏ —á–µ—Å—Ç–Ω–æ)"
    )
    await state.set_state(Register.sex)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π")


@router.message(Register.sex)
async def register_sex(message: Message, state: FSMContext):
    if message.text not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª –∫–∞–∫ '–º—É–∂—Å–∫–æ–π' –∏–ª–∏ '–∂–µ–Ω—Å–∫–∏–π' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."
        )
        return
    await state.update_data(sex=message.text)
    await state.set_state(Register.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")


@router.message(Register.age)
async def register_age(message: Message, state: FSMContext):
    if not is_digit(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25)."
        )
        return
    await state.update_data(age=message.text)
    await state.set_state(Register.height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç")


@router.message(Register.height)
async def register_height(message: Message, state: FSMContext):
    if not is_digit(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175)."
        )
        return
    await state.update_data(height=message.text)
    await state.set_state(Register.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å")


@router.message(Register.weight)
async def register_weight(message: Message, state: FSMContext):
    if not is_digit(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70)."
        )
        return
    await state.update_data(weight=message.text)
    await state.set_state(Register.ph_condition)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –∞–∫—Ç–∏–≤–Ω—ã, –∫–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –∏ —Ç.–¥."
    )


@router.message(Register.ph_condition)
async def register_ph_condition(message: Message, state: FSMContext):
    await state.update_data(ph_condition=message.text)
    await state.set_state(Register.ch_illnesses)
    await message.answer(
        '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-—Ç–æ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Ç—Ä–∞–≤–º—ã, –∞–ª–ª–µ—Ä–≥–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç")'
    )


@router.message(Register.ch_illnesses)
async def register_ch_illnesses(message: Message, state: FSMContext):
    await state.update_data(ch_illnesses=message.text)
    await state.set_state(Register.goal)
    await message.answer(
        "–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ (–Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É, –ø–æ—Ö—É–¥–µ—Ç—å, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º)?"
    )


async def send_reminder(tg_id: int):
    await bot.send_message(tg_id, "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –ø–æ–±–æ–ª—å—à–µ!")


@router.message(Register.goal)
async def register_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    data = await state.get_data()
    await rq.set_user(
        tg_id=message.from_user.id,
        name=data.get("name"),
        sex=data.get("sex"),
        age=int(data.get("age")),
        height=int(data.get("height")),
        weight=int(data.get("weight")),
        ph_condition=data.get("ph_condition"),
        ch_illnesses=data.get("ch_illnesses"),
        goal=data.get("goal"),
        is_registered=True,
    )
    await message.answer(
        f'–í–∞—à–µ –∏–º—è: {data.get("name")}\n–í–∞—à –ø–æ–ª: {data.get("sex")}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data.get("age")}\n–í–∞—à —Ä–æ—Å—Ç: {data.get("height")}\n–í–∞—à –≤–µ—Å: {data.get("weight")}\n',
        reply_markup=kb.register,
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)
    await state.clear()
    await state.clear()
    task = scheduler.add_job(
        send_reminder, "interval", seconds=180, args=[message.from_user.id]
    )
    reminder_tasks[message.from_user.id] = task
    await message.answer(
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã."
    )
    if not scheduler.running:
        scheduler.start()


@router.message(Command("contacts"), State(None))
async def contacts(message: Message):
    await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", reply_markup=kb.contacts)


@router.message(F.text == "–í–æ–π—Ç–∏")
async def abletowrite(message: Message, state: FSMContext):
    try:
        user_data = await rq.get_user_data(message.from_user.id)
        await message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data["name"]}', reply_markup=kb.register
        )
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)
    except Exception:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")


@router.message(Command("instruction"), State(None))
async def instruction(message: Message):
    instruction_text = """
    üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–æ–π–¥–∏ –≤ —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è –∞–∫–∫–∞—É–Ω—Ç!** üéâ

    –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ë–ñ–£ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã.


    üìå **–ö–∞–∫ –Ω–∞—á–∞—Ç—å?**
    - –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
    
    üìù **–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º?**
    - –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –£–∑–Ω–∞—Ç—å –ë–ñ–£ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.
    - –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–æ–∫ –°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –∏ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –Ω–µ –Ω–∞–¥–æ. –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

    ‚öôÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
    - `/start` - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
    - `/instruction` - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

    üë®‚Äçüíª **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:**
    - **"–£–∑–Ω–∞—Ç—å –ë–ñ–£"** ‚Äî –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—É —É–∑–Ω–∞—Ç—å –µ–≥–æ –ë–ñ–£.
    - **"–°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω"** ‚Äî –ë–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω, —É—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ü–µ–ª–∏.
    - **"–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"** ‚Äî –ë–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ö–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

    üë©‚Äçüíª **–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º! –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞–¥–æ–¥—è—Ç—Å—è –≤ –º–µ–Ω—é, —Ç–∞–∫–∂–µ –∏—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ `/contacts`**

 

    –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üòä
    """
    await message.answer(instruction_text)


llm = GigaChat(
    credentials=GigaChatKey,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False,
    streaming=False,
)

messages = [
    SystemMessage(
        content="–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤—å—è.–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–µ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, —É–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è), –∞ —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç. –¢—ã –¥–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é, —É—á–∏—Ç—ã–≤–∞—è –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç."
    )
]


async def get_gigachat_response(user_message):

    messages.append(HumanMessage(content=user_message))

    response = llm.invoke(messages)

    messages.append(response)

    return response.content


@router.message(F.text == "–£–∑–Ω–∞—Ç—å –ë–ñ–£")
async def abletowrite(message: Message, state: FSMContext):
    await rq.bju_request(tg_id=message.from_user.id, request=message.text)
    await state.set_state(Write.can)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –ë–ñ–£ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")


@router.message(Write.can)
async def PFC_message(message: Message, state: FSMContext):
    user_message = (
        message.text
        + "–∫—Ä–∞—Ç–∫–æ –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"
    )
    response = await get_gigachat_response(user_message)
    await message.reply(response)
    await state.clear()


@router.message(F.text == "–°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω")
async def handle_message(message: Message, state: FSMContext):
    logging.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –°–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω")
    user_data = await rq.get_user_data(message.from_user.id)
    user_message = f'–ü–æ–ª: {user_data["sex"]}, –≤–æ–∑—Ä–∞—Å—Ç: {user_data["age"]}, —Ä–æ—Å—Ç: {user_data["height"]}, –≤–µ—Å: {user_data["weight"]}, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data["ph_condition"]}, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Ç—Ä–∞–≤–º—ã: {user_data["ch_illnesses"]}, —Ü–µ–ª—å: {user_data["goal"]}. –°–æ—Å—Ç–∞–≤—å –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–∏–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ (—Ä–∞—Å–ø–∏—Å—ã–≤–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –µ–º—É –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤'
    response = await get_gigachat_response(user_message)
    await message.reply(response)
    await rq.diet_plan_request(tg_id=message.from_user.id)


@router.message(F.text == "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
async def handle_message(message: Message, state: FSMContext):
    logging.debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    user_data = await rq.get_user_data(message.from_user.id)
    user_message = f'–ü–æ–ª: {user_data["sex"]}, –≤–æ–∑—Ä–∞—Å—Ç: {user_data["age"]}, —Ä–æ—Å—Ç: {user_data["height"]}, –≤–µ—Å: {user_data["weight"]}, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data["ph_condition"]}, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Ç—Ä–∞–≤–º—ã: {user_data["ch_illnesses"]}, —Ü–µ–ª—å: {user_data["goal"]}. –°–æ—Å—Ç–∞–≤—å –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—Ä–∞—Å–ø–∏—Å—ã–≤–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –µ–º—É –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤'
    print(user_message)
    response = await get_gigachat_response(user_message)
    await message.reply(response)
    await rq.training_plan_request(tg_id=message.from_user.id)


@router.message()
async def without_button(message: Message):
    await message.reply("–ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!")
