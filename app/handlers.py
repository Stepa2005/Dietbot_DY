from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from html import escape
import asyncio
import logging
from bot import bot

import app.keyboards as kb

#–û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
class Register(StatesGroup):
    name = State()
    t_id = State()
    sex = State()
    weight = State()
    ph_condition = State() # –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ch_illnesses = State() # –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–ª—é–±—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)

listuser = {}    
router = Router()
@router.message(CommandStart(), State(None))
async def cmd_start(message: Message, state: FSMContext):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç', reply_markup=kb.register_keyboard)  #{message.from_user.last_name} {message.from_user.first_name}! –í–∞—à id={message.from_user.id}\n
    #await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è', show_alert=True)
    #await state.update_data(lastfirstname=f'{message.from_user.last_name} {message.from_user.first_name}')
    #await state.set_state(Register.name)
    await message.answer(f'–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')

@router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register(message: Message, state:FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.t_id)
    await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

@router.message(Register.t_id)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(t_id=message.from_user.id)
    await message.answer('–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞–π—Ç–µ –∏ —á–µ—Å—Ç–Ω–æ)')
    await state.set_state(Register.sex)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª ‚ôÇ/‚ôÄ')

@router.message(Register.sex)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(sex=message.text)
    await state.set_state(Register.weight)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å')

@router.message(Register.weight)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await state.set_state(Register.ph_condition)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –∞–∫—Ç–∏–≤–Ω—ã, –∫–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –∏ —Ç.–¥.')

@router.message(Register.ph_condition)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(ph_condition=message.text)
    await state.set_state(Register.ch_illnesses)
    await message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-—Ç–æ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, —Ç—Ä–∞–≤–º—ã (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç")')

@router.message(Register.ch_illnesses)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(ch_illnesses=message.text)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data.name}\n–í–∞—à –ø–æ–ª: {data.sex}\n–í–∞—à –≤–µ—Å: {data.weight}\n')
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id, reply_markup=kb.main_keyboard)
    await state.clear()

'''@router.message(Register.name)
async def inputfio(message: Message, state: FSMContext):
    if len(message.text.split()) != 2:
      await message.answer(f'–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
      return
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!', show_allert=True)
    #await state.set_state(Register.t_number)
    data = await state.get_data()
    listuser[message.from_user.id] = data['lastfirstname']
    print(listuser[message.from_user.id])
    await state.clear()'''

'''
@router.message(Register.t_number)
async def inputfio(message: Message, state: FSMContext):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    data = await state.get_data()
    listuser[message.from_user.id] = data['lastfirstname']
    await state.clear()
'''
@router.message(Command("com1"), State(None))
async def cmd_com1(message: Message, state: FSMContext):
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –±–ª—é–¥–æ, –ë–ñ–£ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.')
    if message.text.LowerCase == "–∫—É—Ä–∏—Ü–∞":
        await message.answer(f'–ë –ñ –£')
    #resize_keyboard=True: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä.
    #one_time_keyboard=True: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    #input_field_placeholder: –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å ¬´–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ...¬ª –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é.

@router.message(Command("com2"), State(None))
async def cmd_com2(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text='–í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data='content')
    builder.button(text='–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ', callback_data='about')
    builder.button(text="–ú–æ–π Telegram", url='https://t.me/varn_alex/')
    builder.button(text="–í–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://tgbot.ru/app"))
    builder.adjust(1, 1, 2)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–ª–¥–µ—Ä–∞.', reply_markup=builder.as_markup())

@router.callback_query(F.data == 'content')
async def send_content(call: CallbackQuery):
    await call.answer('–û—Ç–æ–±—Ä–∞–∂–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', show_alert=True)
    await call.message.answer("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n1. –†–∞–∑–¥–µ–ª 1.\n2. –†–∞–∑–¥–µ–ª 2. \n3. –†–∞–∑–¥–µ–ª 3.")

@router.message((F.text == "üìñ –û —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ") | (F.text.lower() == '–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ'))
@router.callback_query(F.data == 'about')
async def send_about(call_or_message):
    print(type(call_or_message))
    if type(call_or_message) == Message:
      objectmes = call_or_message
    else:
      objectmes = call_or_message.message
      await objectmes.answer('–û—Ç–æ–±—Ä–∞–∂–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', show_alert=True)
    await objectmes.answer("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n1. –†–∞–∑–¥–µ–ª 1.\n2. –†–∞–∑–¥–µ–ª 2. \n3. –†–∞–∑–¥–µ–ª 3.")

@router.message(F.text.lower().in_({'—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', '—Ä–∞–∑–¥–µ–ª'}))
async def cmd_mes(message: Message):
    await message.answer("–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫!", reply_markup=ReplyKeyboardRemove())

'''@dp.message()
async def prtext(message: Message, state: FSMContext):
    await message.answer("–ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)")
'''
@router.message(F.text == "–£–∑–Ω–∞—Ç—å –ë–ñ–£")
async def PFC(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", reply_markup=kb.PFC)

@router.callback_query(F.data == 'Chicken')
async def chicken(call: CallbackQuery):
    await call.answer('–û—Ç–æ–±—Ä–∞–∂–∞—é –ë–ñ–£', show_alert=True)
    await call.message.answer('1 10 15')